SOME INFO BEFORE GETTING STARTED
====>Object File Sections (Texts, Data, …)
An object file is divided into sections containing different types of data. In the most common case, there are three sections: the text section, which holds instructions and read-only data; the data section, which holds initialized writable data; and the bss section, which holds uninitialized data. Some systems have other kinds of sections

====>Object file does not contain any abosolute addresses of the target, hence its called
as Relocatable-object file





1)the whole contents to be falshed onto the target is made of 
 .text section -->holds all the code instructionsto be flashed 
to SRAM and read-only data
 .data section -->holds the initialized writable data
 .bss section -->uninitialized data, data initialized to zero '0'.
 .rodata section -->holds initialized data like gloabal const variables and initialized arrays etc.
 .comment section

2)Disassembling the .text section using command 
arm-none-eabi-objdump.exe main.o -d 
converts the object file contents to assembly opcodes contents 
re-direct the dissassembly to a file using      > filename 
eg. arm-none-eabi-objdump.exe main.o -d > dissfile

2.5) use -s to get contents of all the sections 
eg. arm-none-eabi-objdump.exe main.o -s

2.7) use -D to get disassembly of all the sections
eg. arm-none-eabi-objdump.exe main.o -D

3)In the compiler all the contents to be flashed have a 
base address of 0x00000000 and gets incremented with a 
particular offset for every consicutive instruction.

4)But in the case of a target the base address of the code or 
data is not 0x00000000 and its unique of every uC memorymap.

5)If one more file1.c is made to work with main.c, then the both assembled files .text sections start at base address 
0x00000000 and 0x00000000 and that will create a conflict.
THATS WHY WE NEED A TO RELOCATE THEM USING LINKER/LINKERSCRIPT.
BY ASSIGNING RELOCATABLE ADDRESS TO THE RESPECTIVE SECTIONS.

6)To generate the final ELF file, we need to link all
 the object files using linker scripts.
this linker script has an extension .ld
and thid linker script file must be supplied at the
linking phase to the linker using -T 


7) some important linker scripts commands
	ENTRY
	MEMORY
	SECTIONS
	KEEP
	ALIGN
	AT>

======> to see all the symbols in a elf file, use the below command
	arm-none-eabi-nm.exe filename.elf
	


